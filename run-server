#!/usr/bin/env python
###############################################################################
# Runs the Spark Test Server from the source file                             #
###############################################################################
###############################################################################
#                                   IMPORTS                                   #
###############################################################################
import xml.etree.ElementTree
import sys
import os
import subprocess
###############################################################################
#                                  CONSTANTS                                  #
###############################################################################
POM_FNAME = "pom.xml"
JAR_FILE_TEMPLATE = "target/%(artifact_id)s-%(version)s.jar"
XMLNS = "http://maven.apache.org/POM/4.0.0"
CLASS_PATH_TOOL = "bin/classpath"
MAIN_CLASS="spark_test_server.Main"
###############################################################################
#                                    CODE                                     #
###############################################################################
def project_path():

	script_dir = os.path.dirname(sys.argv[0])
	return os.path.realpath(script_dir)

def pom_findAll(node, search):

	return node.findall('{%s}%s' % (XMLNS, search) )

def project_jarfile():

	pom_path = os.path.join(project_path(), POM_FNAME)
	tree = xml.etree.ElementTree.parse(pom_path)

	root = tree.getroot()

	try:
		artifact_id = pom_findAll(root, "artifactId")[0].text
		version = pom_findAll(root, "version")[0].text
	except IndexError as e:
		raise RuntimeError("pom.xml is missing required attributes")

	return os.path.join(
		project_path(),
		JAR_FILE_TEMPLATE % {
			'artifact_id': artifact_id, 'version': version
		}
	)

def get_class_path():

	exe = os.path.join(project_path(), CLASS_PATH_TOOL)

	proc = subprocess.Popen([exe], stdout=subprocess.PIPE)

	out, err = proc.communicate()

	if proc.returncode != 0:
		raise IOError("Error getting classpath from maven")

	return out.strip()

def become_server(jar_file, class_path):

	full_cp = "%s:%s" % (class_path, jar_file)

	os.execvpe(
		'java',
		['java', '-cp', full_cp, MAIN_CLASS] + sys.argv[1:],
		os.environ
	)

if __name__ == '__main__':

	try:
		jar_file = project_jarfile()
	except IOError as e:
		sys.stderr.write('Error finding project jar file\n')
		exit(-1)
	except RuntimeError as e:
		sys.stderri.write("%s\n" % str(e))
		exit(-1)

	if not os.path.exists(jar_file):
		sys.stderr.write("Jar file %s not found\n" % jar_file)
		exit(-1)

	try:
		class_path = get_class_path()
	except IOError as e:
		sys.stderr.write("%s\n" % str(e))
		exit(-1)

	try:
		become_server(jar_file, class_path)
	except OSError as e:
		sys.stderr.write("%s\n" % str(e))
		exit(-1)